{-
    Functor's laws

    fmap id = id
    { def }
    LDL . fmap (fmap (fmap id)) . remLDL = id
    { valids fmap }
    LDL . id . remLDL = id
    { LDL . remLDL = id, remove id }
    id = id

    fmap (f . g) ==  fmap f . fmap g
    { fmap def }
    fmap (f . g) == LDL . fmap (fmap (fmap f)) . remLDL . LDL . fmap (fmap (fmap g)) . remLDL
    { LDL . remLDL = id, remove id }
    fmap (f . g) == LDL . fmap (fmap (fmap f)) . fmap (fmap (fmap g)) . remLD
    { fmap (f . g) = fmap f . fmap g x3 }
    fmap (f . g) == LDL . fmap (fmap (fmap f .g)) . remLDL
    { fmap def }
    fmap (f . g) == fmap (f . g)
-}
{-
    Monoid's (lax monoidal functor) laws
    pure id <*> v = v  Identity
    pure f <*> pure x = pure (f x) Homomorphism
    u <*> pure y = pure ($ y) <*> u Interchange
    pure (.) <*> u <*> v <*> w = u <*> (v <*> w) Composition

    Identity
    pure id <*> v = v
    { pure def x2 }
    LDL [(mempty, (0, id))] <*> v = v
    { <*> def x2 }
    forall (w, (d, v')) in v => LDL [(mempty <> w, (0 + d, id v'))] = v
    { mempty <> z = z, nat id, 0 + d = d }
    forall (w, (d, v')) in v => LDL [(w, (d, v')] = v
    { LDL [(w, (d, v'))] = v }
    v = v

    Homomorphism
    pure f <*> pure x = pure (f x)
    { pure def x2 }
    LDL [(mempty, (0, f))] <*> LDL [(mempty, (0, x))] = pure (f x)
    { <*> def, pure def }
    LDL [(mempty, (0, f x))] = LDL [(mempty, (0, f x))]

    Interchange
    u <*> pure y = pure ($ y) <*> u
    { pure def x2, ($ y) = \f -> f y }
    u <*> LDL [(mempty, (0, y))] = LDL [(mempty, (0, (\f -> f y)))] <*> u
    { <*> def x2, func ap, mempty <> w = w, d + 0 = d  }
    forall (w, (d, u')) in u => LDL [(w, (d, u' y))] = LDL [(w, (d, u' y)))]

    Composition
    pure (.) <*> u <*> v <*> w = u <*> (v <*> w)
    { pure def }
    LDL [(mempty, (0, (.)))] <*> u <*> v <*> w = u <*> (v <*> w)
    { <*> def , mempty <> w = w, d + 0 = d  }
    forall (w', (d', u')) in u => LDL [(w', (d', (u' . )))] <*> v <*> w = u <*> (v <*> w)
    { <*> def, uap = LDL [(mempty, (0, (.)))] <*> u }
    forall (w', (d', (u' . ))) in uap, forall (w'', (d'', v')) in v =>  LDL [(w' <> w'', (d'+d'', (u' . v')))] <*> w = u <*> (v <*> w)
    { <*> def, uvap = LDL [(mempty, (0, (.)))] <*> u <*> v  }
    forall (w' <> w'', (d'+d'', (u' . v'))) in uvap, forall (w''', (d''', w')) in w => LDL [(w' <> w'' <> w''', (d'+d''+d''', (u' . v') w'))]
    { (f . g) x = f (g x) }
    { left  = LDL [(w' <> w'' <> w''', (d'+d''+d''', u' (v' w')))] }
    { <*> def }
    forall (w'', (d'', v')) in v, forall (w''', (d''', w')) in w =>  u <*> LDL [(w'' <> w''', (d''+d''', v' w'))]
    { <*> def, vap = v <*> w }
    forall (w', (d', u')) in u, forall (w'' <> w''', (d''+d''', v' w')) in vap => LDL [(w' <> w'' <> w''', (d'+d''+d''', u' (v' w')))]
    { right = LDL [(w' <> w'' <> w''', (d'+d''+d''', u' (v' w')))] = left }
-}
