<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>chan take, release, takehand, releaseHand;

bool side, middleC;
bool hasBackie;

clock time;	

bool swap(bool b) { return not b; } 
</declaration>
	<template>
		<name x="32" y="16">Person</name>
		<parameter>const int delay</parameter>
		<declaration>const bool left = false;
const bool right = true;
const bool notmiddle = false;
const bool middle = true;
const bool isBackie = true;
const bool isNotBackie = false;

clock y;
bool backie;

bool is(bool t) {return  t == isBackie; }
bool isNot(bool t) {return  t == isNotBackie; }

bool isOnTheLeft(bool side) { return side == left; }
bool isOnTheRight(bool side) { return side == right; }

bool isOnThe(bool t) { return t == middle; }
bool isNotOnThe(bool t) { return t == notmiddle; }
</declaration>
		<location id="id0" x="459" y="76">
			<name x="451" y="47">MiddleOfTraversing</name>
		</location>
		<location id="id1" x="459" y="263">
			<name x="468" y="285">safe</name>
		</location>
		<location id="id2" x="-153" y="263">
			<name x="-212" y="289">MiddleOfReturning</name>
		</location>
		<location id="id3" x="-153" y="76">
			<name x="-200" y="47">unsafe</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="680" y="51">y &gt;= delay and is(backie)</label>
			<label kind="synchronisation" x="927" y="119">releaseHand!</label>
			<label kind="assignment" x="663" y="93">backie = false, hasBackie = false</label>
			<nail x="909" y="76"/>
			<nail x="909" y="263"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="0" y="-33">isOnTheLeft(side) and isOnThe(middleC)</label>
			<label kind="synchronisation" x="119" y="9">takehand!</label>
			<label kind="assignment" x="34" y="-59">y = 0, backie = true, hasBackie = true</label>
			<nail x="153" y="-8"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-17" y="85">isOnTheLeft(side) and isNotOnThe(middleC)</label>
			<label kind="synchronisation" x="127" y="51">take!</label>
			<label kind="assignment" x="-8" y="110">y = 0, backie = false, middleC = true</label>
			<nail x="382" y="76"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-238" y="187">y &gt;= delay</label>
			<label kind="synchronisation" x="-229" y="153">release!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="93" y="272">isOnTheRight(side)</label>
			<label kind="synchronisation" x="136" y="238">take!</label>
			<label kind="assignment" x="93" y="297">y = 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="255" y="187">y &gt;= delay and isNot(backie) and hasBackie == false</label>
			<label kind="synchronisation" x="399" y="144">release!</label>
			<label kind="assignment" x="399" y="212">middleC = false</label>
		</transition>
	</template>
	<template>
		<name x="32" y="-16">Flashlight</name>
		<location id="id4" x="-59" y="34">
			<name x="-76" y="0">one</name>
		</location>
		<location id="id5" x="-637" y="34">
			<name x="-653" y="2">free</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-348" y="-34">take?</label>
			<nail x="-323" y="-51"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-357" y="8">release?</label>
			<label kind="assignment" x="-391" y="51">side = swap(side)</label>
		</transition>
	</template>
	<template>
		<name>Backpack</name>
		<location id="id6" x="-518" y="-42">
			<name x="-534" y="-74">alone</name>
		</location>
		<location id="id7" x="-170" y="-42">
			<name x="-183" y="-22">two</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-399" y="-68">releaseHand?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-374" y="-161">takehand?</label>
			<nail x="-340" y="-136"/>
		</transition>
	</template>
	<system>TheDoctor = Person(1);
RiverSong = Person(2);
DonnaNoble = Person(5);
RoseTaylor = Person(10);


system TheDoctor, RiverSong, DonnaNoble, RoseTaylor, Flashlight, Backpack;</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>The system is deadlock free.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; TheDoctor.safe
			</formula>
			<comment>Viking 1 can cross the bridge.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; TheDoctor.safe
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; TheDoctor.safe
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not (RoseTaylor.safe and time&lt;10)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; RoseTaylor.safe imply time&gt;=10
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; TheDoctor.safe and RiverSong.safe and DonnaNoble.safe and RoseTaylor.safe and time&lt;17</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; TheDoctor.safe and RiverSong.safe and DonnaNoble.safe and RoseTaylor.safe and time==17
			</formula>
			<comment>Scheduling problem reformulated as reachability formula. Use
'Diagnostic Trace:Fastest' option to find fastest solution.
			</comment>
		</query>
	</queries>
</nta>
